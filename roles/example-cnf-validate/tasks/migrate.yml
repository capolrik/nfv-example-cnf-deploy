---
- name: get TestPMD CR info
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: TestPMD
  register: testpmd_list
- name: validate number of TestPMD CRs
  fail:
    msg: "TestPMD CRs count ({{ testpmd_list.resources|length }}) is invalid "
  when: "testpmd_list.resources|length != 1"
- name: set testpmd CR name
  set_fact:
    testpmd_cr_name: "{{ testpmd_list.resources[0].metadata.name }}"
- name: get TRexConfig CR info
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: TRexConfig
  register: trex_list
- name: validate number of TRexConfig CRs
  fail:
    msg: "TRexConfig CRs count ({{ trex_list.resources|length }}) is invalid "
  when: "trex_list.resources|length != 1"
- name: set trexconfig CR name
  set_fact:
    trex_cr_name: "{{ trex_list.resources[0].metadata.name }}"

# Ensure there is atleast one patcket matched event
- name: get packet matched event from trex
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: Event
    field_selectors:
      - reason==PacketMatched
  register: matched
  no_log: true
- name: fail if no packet matched event is found from trex
  fail:
    msg: "PacketMatched event is not found in TRexConfig CR"
  when: matched.resources|length == 0

# currently only one testpmd is expected
- name: get testpmd pod
  k8s_info:
    kind: Pod
    namespace: "{{ cnf_namespace }}"
    label_selectors:
      - example-cnf-type=cnf-app
  register: testpmd_pod
- name: fail if the testpmd pod is not found
  fail:
    msg: "Unable to find testpmd pod"
  when:
    - "testpmd_pod.resources|length != 1"

- name: set testpmd node name
  set_fact:
    testpmd_existing_node: "{{ testpmd_pod.resources[0].spec.nodeName }}"
    testpmd_existing_pod_name: "{{ testpmd_pod.resources[0].metadata.name }}"
- name: show current node of testpmd
  debug:
    msg: "TestPMD is running on node {{ testpmd_existing_node }}"
- name: cordon the node
  shell: |
    export KUBECONFIG={{ kubeconfig_path }}
    {{ oc_tool_path }} adm cordon {{ testpmd_existing_node }}

- name: delete the testpmd pod
  k8s:
    kind: Pod
    namespace: "{{ cnf_namespace }}"
    name: "{{ testpmd_existing_pod_name }}"
    state: absent
    wait: yes
    wait_timeout: 300
- name: check testpmd pod count to be 1 and running
  k8s_info:
    namespace: "{{ cnf_namespace }}"
    kind: Pod
    label_selectors:
      - example-cnf-type=cnf-app
  register: testpmd_pods
  retries: 60
  delay: 5
  until:
    - "testpmd_pods.resources|length == 1"
    - "'status'  in testpmd_pods.resources[0]"
    - "'phase'  in testpmd_pods.resources[0].status"
    - "testpmd_pods.resources[0].status.phase == 'Running'"

- name: set new testpmd node name
  set_fact:
    testpmd_new_node: "{{ testpmd_pods.resources[0].spec.nodeName }}"

- name: uncordon the node
  shell: |
    export KUBECONFIG={{ kubeconfig_path }}
    {{ oc_tool_path }} adm uncordon {{ testpmd_existing_node }}

- fail:
    msg: "TestPMD pod is not migrated"
  when: testpmd_new_node == testpmd_existing_node

- debug:
    msg: "TestPMD pod is migrated from {{ testpmd_existing_node }} to {{ testpmd_new_node }}"

- name: wait for migration to complete and packet recovery
  pause:
    seconds: "{{ migration_delay_seconds|default(30) }}"
