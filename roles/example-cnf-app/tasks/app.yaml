---
# NetworkAttachmentDefintions should be created on the namespace, it
# will be created by sriov operator, when SriovNetwork resource is created
- name: check for net-attach-def presence in the namepsace
  k8s_info:
    api_version: k8s.cni.cncf.io/v1
    kind: NetworkAttachmentDefinition
    namespace: "{{ cnf_namespace }}"
  register: net_list
  async: 30
  poll: 2
  failed_when: "net_list|length == 0"

# Check Label node to run trex
# label_selectors cannot work with '/' in labels
- name: get all nodes
  k8s_info:
    kind: Node
  register: nodes
  no_log: true
- name: reset node count
  set_fact:
    trex_node_count: 0
    testpmd_node_count: 0
    lb_node_count: 0
- name: get all testpmd nodes
  set_fact:
    testpmd_node_count: "{{ testpmd_node_count|int + 1}}"
  when: '"examplecnf.openshift.io/testpmd" in item["metadata"]["labels"]'
  loop: "{{ nodes.resources }}"
  no_log: true
- fail:
    msg: "One of the node should have Label (examplecnf.openshift.io/testpmd='')"
  when: "testpmd_node_count|int == 0"

- fail:
    msg: "Need to rewrite the mac merging logic"
  when: "packet_generator_networks|length != 1 or cnf_app_networks|length != 1"
- name: set facts of modifying networks
  set_fact:
    pack_nw: []
    cnf_nw: []
- name: create packet gen network list for lb with hardcoded macs
  set_fact:
    pack_nw: "{{ pack_nw + [ item | combine({ 'mac': lb_gen_port_mac_list[idx:idx+item.count] }) ] }}"
  loop: "{{ packet_generator_networks }}"
  loop_control:
    index_var: idx
- name: create cnf app network list for lb with hardcoded macs
  set_fact:
    cnf_nw: "{{ cnf_nw + [ item | combine({ 'mac': lb_cnf_port_mac_list[idx:idx+item.count] }) ] }}"
  loop: "{{ cnf_app_networks }}"
  loop_control:
    index_var: idx

- name: include lb tasks
  include_tasks: lb-app.yaml
  when: enable_lb|bool

- name: create cr for cnf application
  k8s:
    definition: "{{ lookup('template', 'testpmd-cr.yaml.j2') }}"

- name: check testpmd pod count to be 1
  k8s_info:
    namespace: example-cnf
    kind: Pod
    label_selectors:
      - app=testpmd
  register: testpmd_pods
  retries: 60
  delay: 5
  until:
    - testpmd_pods.resources|length == 1
  failed_when:
    - testpmd_pods.resources|length != 1
- name: check testpmd pod status to be running
  k8s_info:
    namespace: example-cnf
    kind: Pod
    label_selectors:
      - app=testpmd
  register: testpmd_pods
  retries: 60
  delay: 5
  until:
    - testpmd_pods.resources[0].status.phase == 'Running'
  failed_when:
    - testpmd_pods.resources[0].status.phase != 'Running'

- name: check testpmdmac resource (created by testpmd app)
  k8s_info:
    namespace: example-cnf
    kind: TestPMDMac
  register: testpmdmac
  retries: 120
  delay: 5
  until:
    - testpmdmac.resources|length > 0
  failed_when:
    - testpmdmac.resources|length == 0

- name: trex cr block
  when: enable_trex|bool
  block:
    - name: include trex tasks to create app
      include_tasks: trex-app.yaml
    - name: restart trex once if the packet generation has not started
      block:
        - name: delete trexconfig cr
          k8s:
            namespace: example-cnf
            kind: TRexConfig
            name: "{{ trex_cr_name }}"
            state: absent
        - pause:
            seconds: 45
        - name: re-run trex tasks to create app again
          include_tasks: trex-app.yaml
      when:
        - "trex_retry|default(true)|bool"
        - "trex_matched_event is defined"
        - "'resources' in trex_matched_event"
        - "trex_matched_event.resources|length == 0"
    - name: fail if no packet matched event is found from trex
      fail:
        msg: "PacketMatched event is not found in TRexConfig CR"
      when: trex_matched_event.resources|length == 0
